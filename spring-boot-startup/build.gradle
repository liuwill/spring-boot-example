buildscript {
    repositories {
        maven {url 'http://maven.aliyun.com/nexus/content/groups/public/'}

        mavenCentral()
        jcenter()
        maven { url 'https://repo.spring.io/snapshot' }
        maven { url 'https://repo.spring.io/milestone' }
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.0.0.RELEASE'
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0'
    }
}

group 'com.liuwill.example'
version '0.0.1'

ext.junitPlatformVersion = '1.1.0'
ext.junitJupiterVersion = '5.1.0'
ext.log4jVersion = '2.10.0'
ext.logbackVersion = '1.2.3'
ext.sl4jVersion = '1.7.25'
ext.junit4Version = '4.12'
ext.junitVintageVersion = '5.1.0'
ext.fastjsonVersion = '1.2.35'
ext.druidVersion = '1.1.9'
ext.sqlDriverVersion = '6.0.6'
ext.mybatisStarterVersion = '1.3.2'// '2.0.0-SNAPSHOT'
ext.retrofitVersion = '2.4.0'
ext.h2DataBaseVersion = '1.4.197'

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: "jacoco"
apply plugin: 'war'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.junit.platform.gradle.plugin'

sourceCompatibility = 1.8

mainClassName = 'com.videopls.mall.activity.ActivityApplication'

repositories {
    maven {url 'http://maven.aliyun.com/nexus/content/groups/public/'}

    mavenCentral()
    jcenter()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

configurations {
    all*.exclude group: 'log4j', module: 'log4j'
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    // compile.exclude group: 'com.google.protobuf', module: 'protobuf-java'
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    testCompile("org.springframework.boot:spring-boot-starter-tomcat")

    // 既可以直接执行，也能用tomcat
    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")
    // tag::actuator[]
    compile("org.springframework.boot:spring-boot-starter-actuator")
    // end::actuator[]
    compile("org.springframework.boot:spring-boot-starter-aop")

    // https://mvnrepository.com/artifact/com.alibaba/fastjson
    compile group: 'com.alibaba', name: 'fastjson', version: fastjsonVersion

    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    compile group: 'org.slf4j', name: 'slf4j-api', version: sl4jVersion
    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4jVersion
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: sl4jVersion

    testCompile("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "junit", module: "junit"
    }

    // testCompile("org.mybatis.spring.boot:mybatis-spring-boot-starter-test:${mybatisStarterVersion}")

    // JUnit Jupiter API and TestEngine implementation
    testCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")

    testCompile("org.junit.platform:junit-platform-runner:${junitPlatformVersion}")

    // If you also want to support JUnit 3 and JUnit 4 tests
    testCompile("junit:junit:${junit4Version}")
    testRuntime("org.junit.vintage:junit-vintage-engine:${junitVintageVersion}")
    testRuntime("org.junit.platform:junit-platform-launcher:${junitPlatformVersion}")

    testRuntime("org.apache.logging.log4j:log4j-core:${log4jVersion}")
    testRuntime("org.apache.logging.log4j:log4j-jul:${log4jVersion}")
    testCompile("ch.qos.logback:logback-classic:${logbackVersion}")

    // https://mvnrepository.com/artifact/com.h2database/h2
    testCompile group: 'com.h2database', name: 'h2', version: h2DataBaseVersion
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}


sourceSets {
    main {
        java { srcDir "src/main/java" }
        resources { srcDir "src/main/resources" }
    }
    test {
        java { srcDir "src/test/java" }
        resources { srcDir "src/test/resources" }
    }
}

war {
    baseName = 'store-activity-api'
    version = project.version
}

jar {
    baseName = 'store-activity-api'
    version = project.version

    enabled = true
    // into('public') {
    //     from 'public'
    // }
}

bootJar {
    baseName = 'spring-boot-startup'
    version = 'build'
    classifier = 'boot'
    mainClassName = 'com.liuwill.example.startup.StartUpApplication'

    launchScript()
}

bootWar {
    baseName = 'spring-boot-startup'
    version = 'build'
    mainClassName = 'com.liuwill.example.startup.StartUpApplication'

    launchScript()
}

springBoot {
    mainClassName = 'com.liuwill.example.startup.StartUpApplication'
    buildInfo {
        properties {
            artifact = 'spring-boot-startup'
            version = 'build'
            group = 'com.liuwill.example'
            name = 'spring boot startup'
        }
    }
}

// ** 打包

// ** Code Quality
junitPlatform {
    platformVersion '1.1.0'
    filters {
        engines {
            // include 'junit-jupiter', 'junit-vintage'
            // exclude 'custom-engine'
        }
        tags {
            // include 'fast'
            exclude 'slow'
        }
        // includeClassNamePattern '.*Test'
    }
    enableStandardTestTask true
    // reportsDir file('build/test-results/junit-platform') // this is the default
    logManager 'org.apache.logging.log4j.jul.LogManager'
    // reportsDir file('build/test-results/junit-platform') // this is the default
    // selectors (optional)
    // filters (optional)
}

// [ FindBugs Start**/
findbugs {
    ignoreFailures = true
    findbugsTest.enabled = false
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}
// ] FindBugs End**/
checkstyle {
    toolVersion = '7.8.2'
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
        // html.stylesheet resources.text.fromFile('config/xsl/checkstyle-custom.xsl')
    }
    configFile = file('config/checkstyle/checkstyle.xml')
}

// junitPlatform.enableStandardTestTask true

jacoco {
    toolVersion = "0.7.9"
    applyTo junitPlatformTest
    // reportsDir = file("$buildDir/customJacocoReportDir")
}

junitPlatformTest {
    jacoco {
        destinationFile = file("${buildDir}/jacoco/test.exec")
    }
}

jacocoTestReport {
    executionData junitPlatformTest
    sourceSets sourceSets.main
    sourceDirectories = files(project.sourceSets.main.allSource.srcDirs)
    classDirectories = files(project.sourceSets.main.output)

    reports {
        xml.enabled = true
        html.enabled = true

        // html.destination = "${buildDir}/jacocoHtml"
    }
}

task parseCoverageSummary(dependsOn: jacocoTestReport) {
    group = 'ci'
    doLast {
        def testReportFile = file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")

        def xmlParser = new XmlParser()
        xmlParser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
        xmlParser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
        def reportDom = xmlParser.parse(testReportFile)
        def coverdInstruct = Integer.parseInt(reportDom.counter[0].@covered)
        def missedInstruct = Integer.parseInt(reportDom.counter[0].@missed)

        def coverageRate = Math.round(coverdInstruct * 10000 / (coverdInstruct + missedInstruct)) / 100
        println ''
        println '=========== Coverage summary ==========='
        println "${project.name} :  ${coverageRate}%"
        println ''

        reportDom.counter.each { counterData ->
            def coverdInstructLine = Integer.parseInt(counterData.@covered)
            def missedInstructLine = Integer.parseInt(counterData.@missed)
            def totalLine = coverdInstructLine + missedInstructLine

            def coverageRateLine = Math.round(coverdInstructLine * 10000 / (coverdInstructLine + missedInstructLine)) / 100
            println "${counterData.@type} :  ${coverageRateLine}%  (${coverdInstructLine}/${totalLine})"
        }
        println '========================================'
    }
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.setDestination(file("${buildDir}/reports/jacoco/report.xml"))
        // xml.destination "${buildDir}/reports/jacoco/report.xml"
        html.enabled false
        csv.enabled false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}

// 使用指定版本的gradle
task wrapper(type: Wrapper) {
    gradleVersion = '4.6'
}
